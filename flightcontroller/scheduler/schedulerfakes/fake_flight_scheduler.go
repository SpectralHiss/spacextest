// Code generated by counterfeiter. DO NOT EDIT.
package schedulerfakes

import (
	"sync"

	"github.com/SpectralHiss/spacextest/flightcontroller/scheduler"
)

type FakeFlightScheduler struct {
	CheckScheduleStub        func(scheduler.LaunchPadID, scheduler.Day, scheduler.DestinationID) bool
	checkScheduleMutex       sync.RWMutex
	checkScheduleArgsForCall []struct {
		arg1 scheduler.LaunchPadID
		arg2 scheduler.Day
		arg3 scheduler.DestinationID
	}
	checkScheduleReturns struct {
		result1 bool
	}
	checkScheduleReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlightScheduler) CheckSchedule(arg1 scheduler.LaunchPadID, arg2 scheduler.Day, arg3 scheduler.DestinationID) bool {
	fake.checkScheduleMutex.Lock()
	ret, specificReturn := fake.checkScheduleReturnsOnCall[len(fake.checkScheduleArgsForCall)]
	fake.checkScheduleArgsForCall = append(fake.checkScheduleArgsForCall, struct {
		arg1 scheduler.LaunchPadID
		arg2 scheduler.Day
		arg3 scheduler.DestinationID
	}{arg1, arg2, arg3})
	fake.recordInvocation("CheckSchedule", []interface{}{arg1, arg2, arg3})
	fake.checkScheduleMutex.Unlock()
	if fake.CheckScheduleStub != nil {
		return fake.CheckScheduleStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkScheduleReturns
	return fakeReturns.result1
}

func (fake *FakeFlightScheduler) CheckScheduleCallCount() int {
	fake.checkScheduleMutex.RLock()
	defer fake.checkScheduleMutex.RUnlock()
	return len(fake.checkScheduleArgsForCall)
}

func (fake *FakeFlightScheduler) CheckScheduleCalls(stub func(scheduler.LaunchPadID, scheduler.Day, scheduler.DestinationID) bool) {
	fake.checkScheduleMutex.Lock()
	defer fake.checkScheduleMutex.Unlock()
	fake.CheckScheduleStub = stub
}

func (fake *FakeFlightScheduler) CheckScheduleArgsForCall(i int) (scheduler.LaunchPadID, scheduler.Day, scheduler.DestinationID) {
	fake.checkScheduleMutex.RLock()
	defer fake.checkScheduleMutex.RUnlock()
	argsForCall := fake.checkScheduleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFlightScheduler) CheckScheduleReturns(result1 bool) {
	fake.checkScheduleMutex.Lock()
	defer fake.checkScheduleMutex.Unlock()
	fake.CheckScheduleStub = nil
	fake.checkScheduleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFlightScheduler) CheckScheduleReturnsOnCall(i int, result1 bool) {
	fake.checkScheduleMutex.Lock()
	defer fake.checkScheduleMutex.Unlock()
	fake.CheckScheduleStub = nil
	if fake.checkScheduleReturnsOnCall == nil {
		fake.checkScheduleReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.checkScheduleReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFlightScheduler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkScheduleMutex.RLock()
	defer fake.checkScheduleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlightScheduler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scheduler.FlightScheduler = new(FakeFlightScheduler)
