// Code generated by counterfeiter. DO NOT EDIT.
package spacexquerierfakes

import (
	"sync"
	"time"

	"github.com/SpectralHiss/spacextest/flightcontroller/spacexquerier"
)

type FakeSpaceXQuerier struct {
	LaunchPossibleStub        func(int, time.Time) bool
	launchPossibleMutex       sync.RWMutex
	launchPossibleArgsForCall []struct {
		arg1 int
		arg2 time.Time
	}
	launchPossibleReturns struct {
		result1 bool
	}
	launchPossibleReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpaceXQuerier) LaunchPossible(arg1 int, arg2 time.Time) bool {
	fake.launchPossibleMutex.Lock()
	ret, specificReturn := fake.launchPossibleReturnsOnCall[len(fake.launchPossibleArgsForCall)]
	fake.launchPossibleArgsForCall = append(fake.launchPossibleArgsForCall, struct {
		arg1 int
		arg2 time.Time
	}{arg1, arg2})
	fake.recordInvocation("LaunchPossible", []interface{}{arg1, arg2})
	fake.launchPossibleMutex.Unlock()
	if fake.LaunchPossibleStub != nil {
		return fake.LaunchPossibleStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.launchPossibleReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceXQuerier) LaunchPossibleCallCount() int {
	fake.launchPossibleMutex.RLock()
	defer fake.launchPossibleMutex.RUnlock()
	return len(fake.launchPossibleArgsForCall)
}

func (fake *FakeSpaceXQuerier) LaunchPossibleCalls(stub func(int, time.Time) bool) {
	fake.launchPossibleMutex.Lock()
	defer fake.launchPossibleMutex.Unlock()
	fake.LaunchPossibleStub = stub
}

func (fake *FakeSpaceXQuerier) LaunchPossibleArgsForCall(i int) (int, time.Time) {
	fake.launchPossibleMutex.RLock()
	defer fake.launchPossibleMutex.RUnlock()
	argsForCall := fake.launchPossibleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpaceXQuerier) LaunchPossibleReturns(result1 bool) {
	fake.launchPossibleMutex.Lock()
	defer fake.launchPossibleMutex.Unlock()
	fake.LaunchPossibleStub = nil
	fake.launchPossibleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSpaceXQuerier) LaunchPossibleReturnsOnCall(i int, result1 bool) {
	fake.launchPossibleMutex.Lock()
	defer fake.launchPossibleMutex.Unlock()
	fake.LaunchPossibleStub = nil
	if fake.launchPossibleReturnsOnCall == nil {
		fake.launchPossibleReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.launchPossibleReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSpaceXQuerier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.launchPossibleMutex.RLock()
	defer fake.launchPossibleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpaceXQuerier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ spacexquerier.SpaceXQuerier = new(FakeSpaceXQuerier)
